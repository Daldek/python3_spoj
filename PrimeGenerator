# Sito Eratostenesa. Badanie zbioru liczb pod katem liczb pierwszych.

import math
numberOfIterations = int(input())  # pobieram od uzytkownika liczbe badanych zbiorow wartosci liczbowych
iterationCounter = 0  # ta zmienna jest potrzebna do poprawnego pobierania warunkow brzegowych od uzytkownika
matrix = []  # lista zawierajca warunki brzegowe wszystkich nadanych zakresow

while numberOfIterations != iterationCounter:

    currentRange = []  # tymczasowa lista sluzaca do okreslenia badanego zakresu liczb
    userInput = list(map(str, input().split()))  # spacja jako separator liczb
    lowerBoundary = int(userInput[0])

    if lowerBoundary < 0:
        exit()
        
    upperBoundary = int(userInput[1])

    if upperBoundary <= lowerBoundary:  # sprawdzenie czy uzytkownik wprowadzil odpowiednie wartosci warunkow brzegowych
        exit()

    currentRange.append(lowerBoundary)  # dodanie dolnego warunku brzegoweg do tymczasowej listy
    currentRange.append(upperBoundary)
    matrix.append(currentRange)  # przeniesienie aktualnego zakresu do docelowej listy
    iterationCounter += 1  # liczik iteracji mowiacy o tym czy uzytkowik nadal bedzie wprowadzac dane

primes = []  # lista do przechowywania liczb pierwszych

for testedRange in matrix:
    lowerBoundary = testedRange[0]
    upperBoundary = testedRange[1]
    differentialTable = []  # tabela, ktora bede odejmowac od badanego zbioru

    if lowerBoundary == 0:
        testingTable = list(range(lowerBoundary+2, upperBoundary+1))  # aktualny badany zbior liczb
        primes.append(0)
        primes.append(1)
        multiplicationLimit = int(math.sqrt(len(testingTable)))  # granica mnozenia
#        print(testingTable)
        
        for integer in testingTable:
            counter = 2  # licznik mnozenia
            testingTable = list(set(testingTable) - set(differentialTable))
            while counter <= multiplicationLimit:
                multiple = integer * counter
                differentialTable.append(multiple)
                counter += 1
            testingTable = list(set(testingTable) - set(differentialTable))
#            print(testingTable)

    elif lowerBoundary == 1:
        testingTable = list(range(lowerBoundary+1, upperBoundary+1))
        primes.append(0)
        primes.append(1)
        multiplicationLimit = int(math.sqrt(len(testingTable)))
        
        for integer in testingTable:
            counter = 2
            testingTable = list(set(testingTable) - set(differentialTable))
            while counter <= multiplicationLimit:
                multiple = integer * counter
                differentialTable.append(multiple)
                counter += 1
            testingTable = list(set(testingTable) - set(differentialTable))
#        print(testingTable)

    else:
        testingTable = list(range(lowerBoundary, upperBoundary+1))
        multiplicationLimit = int(math.sqrt(len(testingTable)))
        for integer in testingTable:
            counter = 2
            testingTable = list(set(testingTable) - set(differentialTable))
            while counter <= multiplicationLimit:
                multiple = integer * counter
                differentialTable.append(multiple)
                counter += 1
            testingTable = list(set(testingTable) - set(differentialTable))
        testingTable = list(set(testingTable) - set(differentialTable))
#        print(testingTable)
    print(testingTable)
