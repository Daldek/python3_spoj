# Sito Eratostenesa

'''
Ta czesc kodu odpowaida za przetworzenie danych wejsciowych od uzytkownika,
tj. liczby badanych zbiorow oraz ich granic
'''

InputNumber = 0
Matrix = []

NumberOfInputs = int(input())
if NumberOfInputs == 0:
    exit()

while NumberOfInputs != InputNumber:

    CurrentRange = []
    UserInput = list(map(str, input().split()))
    LowerBoundary = int(UserInput[0])
    if LowerBoundary < 0:
        exit()
        
    UpperBoundary = int(UserInput[1])
    if UpperBoundary <= LowerBoundary:
        exit()

    CurrentRange.append(LowerBoundary)
    CurrentRange.append(UpperBoundary)
    Matrix.append(CurrentRange)
    InputNumber += 1

'''
Czesc obliczeniowa. Dla kazdego zbioru liczb tworzymy pelna tablice wartosci, obliczamy wielokrotnosci zawartych
w niej wartosci i usuwamy je z badanego zbioru. Usuniete liczby zlozone zapisujemy w tabeli po to, aby uzyc ich
do przyspieszenia obliczen kolejnych zbiorow
'''

from math import sqrt

Primes = []
DifferentialTable = []
TestingTable = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
MultiplicationLimit = int(sqrt(len(TestingTable)))

def LowBoundaryCalc(CalcInput):
    for Integer in TestingTable:
        Counter = 2
        while Counter <= MultiplicationLimit:
            Multiple = Integer * Counter
            DifferentialTable.append(Multiple)
            Counter += 1
        TestingTable = list(set(TestingTable) - set(DifferentialTable))
        print(TestingTable)
    return TestingTable

def HelloWorld():
    print("Hello World")  # to tylko dla testu

#LowBoundaryCalc(TestingTable)

for TestedRange in Matrix:
    LowerBoundary = TestedRange[0]
    UpperBoundary = TestedRange[1]
    if LowerBoundary == 0:
        #TestingTable = list(range(LowerBoundary+2, UpperBoundary+1))
        #LowBoundaryCalc(TestingTable)
        HelloWorld()
